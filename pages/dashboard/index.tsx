import {
  Badge,
  Box,
  Button,
  Chip,
  Container,
  IconButton,
  Paper,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Toolbar,
  Typography,
} from "@mui/material";
import dynamic from "next/dynamic";
const Table = dynamic(() => import("@mui/material/Table/Table"), {
  ssr: false,
});
import { signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { AppNav } from "../../components";
import PollFormDialog from "../../components/PollFormDialog";
import { createPoll } from "../../lib";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import Link from "next/link";

const Dashboard = () => {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [polls, setPolls] = useState([]);

  useEffect(() => {
    if (status === "unauthenticated") {
      router.push("/");
    }
  }, [status, router]);

  useEffect(() => {
    const fetchMyPolls = async () => {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_HOST}/api/polls`, {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      const { data } = await res.json();
      setPolls(data);
    };
    fetchMyPolls();
  }, []);

  const handleDialogCancel = () => setOpen(false);

  const handleSave = async (question: string, options: string[]) => {
    try {
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_HOST}/api/polls`, {
        method: "POST",
        body: JSON.stringify({ question: question, options: options }),
        headers: {
          "Content-Type": "application/json",
        },
      });

      const { data } = await res.json();
      //setPolls([...polls, data.data])
    } catch (e) {}
  };

  return (
    <div>
      <Head>
        <title>Pollz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <AppNav session={session} />
        <Container sx={{ mt: "125px" }}>
          <Box sx={{ width: "100%" }}>
            <Paper
              sx={{
                width: "100%",
                mb: 2,
                backgroundColor: "custom.backgroundAlt",
                color: "custom.text",
              }}
            >
              <Toolbar sx={{ justifyContent: "space-between" }}>
                <Typography>My Pollz</Typography>
                <Button variant="outlined" onClick={() => setOpen(true)}>
                  New Poll
                </Button>
              </Toolbar>
              <TableContainer>
                <Table>
                  <TableHead>
                    <TableCell sx={{ color: "custom.text" }}>
                      Question
                    </TableCell>
                    <TableCell sx={{ color: "custom.text" }}>Options</TableCell>
                    <TableCell></TableCell>
                  </TableHead>
                  {polls.map((p) => (
                    <TableRow key={p.id}>
                      <TableCell>{p.question}</TableCell>
                      <TableCell>
                        {p.options.map((o) => (
                          <Badge
                            key={o.id}
                            color="secondary"
                            badgeContent={o._count.votes || "0"}
                            max={999}
                            sx={{ mr: 3 }}
                          >
                            <Chip
                              sx={{
                                backgroundColor: "custom.background",
                                color: "custom.text",
                              }}
                              label={`${o.name}`}
                            />
                          </Badge>
                        ))}
                      </TableCell>
                      <TableCell sx={{ textAlign: "end" }}>
                        <Link href={`/poll/${p.id}`}>
                          <IconButton
                            aria-label="view"
                            sx={{ color: "custom.text" }}
                          >
                            <VisibilityIcon />
                          </IconButton>
                        </Link>
                        <IconButton aria-label="delete" color="error">
                          <DeleteIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  ))}
                </Table>
              </TableContainer>
            </Paper>
          </Box>
          {open && (
            <PollFormDialog
              open={open}
              handleCancel={handleDialogCancel}
              handleSave={handleSave}
            />
          )}
        </Container>
      </main>
    </div>
  );
};

export default Dashboard;
