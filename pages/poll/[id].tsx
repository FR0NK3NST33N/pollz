import { useSession } from "next-auth/react";
import { Box, CircularProgress, Paper, Typography } from "@mui/material";
import { NextPage } from "next";
import { CenteredPage, SiteNav, PollOptions, AppNav } from "../../components";
import Head from "next/head";
import dynamic from "next/dynamic";
import { useAbly, usePoll, useVote } from "../../hooks";
const PollResults = dynamic(() => import("../../components/PollResults"), {
  ssr: false,
});

const Poll: NextPage = () => {
  const [channel] = useAbly("vote", (message) => {
    console.log("ably message: ", message);
    setPoll(message.data);
  });
  const { data: session, status } = useSession();
  const { loading, poll, setPoll, totalVotes } = usePoll();
  const {
    handleVote,
    handleVoteChange,
    loading: voteLoading,
    setVoted,
    vote,
    voted,
  } = useVote(poll, channel);

  return (
    <div>
      <Head>
        <title>Pollz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        {!session && <SiteNav authed={Boolean(session)} />}
        {session && <AppNav session={session} />}
        <CenteredPage>
          <Paper
            sx={{
              minWidth: "450px",
              maxWidth: "90vw",
              padding: "15px",
              backgroundColor: "custom.backgroundAlt",
              color: "custom.text",
            }}
          >
            {(status === "loading" || loading) && (
              <Box
                sx={{
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  m: 4,
                }}
              >
                <CircularProgress />
              </Box>
            )}
            {status !== "loading" && !loading && (
              <>
                <Typography variant="h5" sx={{ fontWeight: "bold", pb: 4 }}>
                  {poll?.question}
                </Typography>
                {!voted && (
                  <PollOptions
                    poll={poll}
                    setVoted={setVoted}
                    vote={vote}
                    voted={voted}
                    handleVote={handleVote}
                    handleVoteChange={handleVoteChange}
                  />
                )}
                {voted && <PollResults poll={poll} totalVotes={totalVotes} />}
              </>
            )}
          </Paper>
        </CenteredPage>
      </main>
    </div>
  );
};

export default Poll;
